# This script generates test cases for problem 1
# generated by DeepSeek for testing purposes.

import random
from bisect import bisect_right

def generate_test_case(n, k, workload_range=(1, 10**5), fixed_workload=None):
    if fixed_workload:
        workloads = [fixed_workload] * n
    else:
        workloads = [random.randint(*workload_range) for _ in range(n)]
    return f"{n} {k}\n{' '.join(map(str, workloads))}\n"

def calculate_expected(n, k, workloads):
    if k > n:
        return -1
    
    def is_possible(max_load):
        employees = 1
        current = 0
        for w in workloads:
            if current + w > max_load:
                employees += 1
                current = w
                if employees > k:
                    return False
            else:
                current += w
        return True
    
    left = max(workloads)
    right = sum(workloads)
    answer = right
    
    while left <= right:
        mid = (left + right) // 2
        if is_possible(mid):
            answer = mid
            right = mid - 1
        else:
            left = mid + 1
    return answer

def write_test_cases(filename):
    with open(filename, 'w') as f:
        # Test Case 1: Small balanced case
        tc1 = generate_test_case(5, 2, fixed_workload=10)
        f.write(tc1)
        exp1 = calculate_expected(5, 2, [10]*5)
        f.write(f"Expected: {exp1}\n\n")

        # Test Case 2: Impossible case
        tc2 = generate_test_case(4, 5, fixed_workload=5)
        f.write(tc2)
        exp2 = calculate_expected(4, 5, [5]*4)
        f.write(f"Expected: {exp2}\n\n")

        # Test Case 3: Random medium case
        tc3 = generate_test_case(20, 3)
        f.write(tc3)
        workloads3 = list(map(int, tc3.split('\n')[1].split()))
        exp3 = calculate_expected(20, 3, workloads3)
        f.write(f"Expected: {exp3}\n\n")

        # Test Case 4: All single tasks
        tc4 = generate_test_case(20, 20, fixed_workload=1)
        f.write(tc4)
        exp4 = calculate_expected(20, 20, [1]*20)
        f.write(f"Expected: {exp4}\n\n")

        # Test Case 5: Large random case (n=200)
        tc5 = generate_test_case(200, 10)
        f.write(tc5)
        workloads5 = list(map(int, tc5.split('\n')[1].split()))
        exp5 = calculate_expected(200, 10, workloads5)
        f.write(f"Expected: {exp5}\n\n")

        # Test Case 6: One huge task
        tc6 = "200 2\n" + "1 "*199 + "100000\n"
        f.write(tc6)
        workloads6 = [1]*199 + [100000]
        exp6 = calculate_expected(200, 2, workloads6)
        f.write(f"Expected: {exp6}\n\n")

        # Test Case 7: Increasing sequence
        tc7 = "200 5\n" + ' '.join(map(str, range(1, 201))) + "\n"
        f.write(tc7)
        workloads7 = list(range(1, 201))
        exp7 = calculate_expected(200, 5, workloads7)
        f.write(f"Expected: {exp7}\n\n")

write_test_cases("stress.txt")
print("Generated test cases with expected outputs in 'stress.txt'")