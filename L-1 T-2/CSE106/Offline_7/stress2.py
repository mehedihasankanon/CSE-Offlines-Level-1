# generated by Grok for testing

import random

def can_seat_students(n, b, seats, m):
    seats_per_bench = n // b
    benches = [seats[i * seats_per_bench:(i + 1) * seats_per_bench] for i in range(b)]
    
    # Validate and mark blocked seats
    for i in range(b):
        for j in range(seats_per_bench):
            if benches[i][j] == 1:
                if j < seats_per_bench - 1:
                    if benches[i][j + 1] in [1, 2]:
                        return False
                    benches[i][j + 1] = -1
            elif benches[i][j] == 2:
                if j > 0:
                    if benches[i][j - 1] in [1, 2]:
                        return False
                    benches[i][j - 1] = -1
                if j < seats_per_bench - 1:
                    if benches[i][j + 1] in [1, 2]:
                        return False
                    benches[i][j + 1] = -1
    
    # Count available seats
    available_seats = sum(row.count(0) for row in benches)
    return available_seats >= m

def generate_test_case(n, b, m, seats=None):
    seats_per_bench = n // b
    if seats is None:
        seats = [0] * n
        # Randomly place type 1 and type 2 students
        for i in range(n):
            if random.random() < 0.3:  # 30% chance to place a student
                seats[i] = random.choice([1, 2])
    return n, b, seats, m

def format_test_case(n, b, seats, m, result):
    seats_str = " ".join(map(str, seats))
    return (f"Input:\n"
            f"{n}\n"
            f"{b}\n"
            f"{seats_str}\n"
            f"{m}\n"
            f"Expected Output:\n"
            f"{str(result).lower()}\n")

def main():
    random.seed(42)  # For reproducibility
    test_cases = []
    
    # Edge Case 1: Minimal case (n=1, b=1, m=0 or 1)
    test_cases.append(generate_test_case(n=1, b=1, m=0, seats=[0]))
    test_cases.append(generate_test_case(n=1, b=1, m=1, seats=[0]))
    test_cases.append(generate_test_case(n=1, b=1, m=1, seats=[1]))  # Blocked by type 1
    
    # Edge Case 2: Single bench, all seats blocked
    test_cases.append(generate_test_case(n=4, b=1, m=1, seats=[2, 0, 0, 0]))  # Type 2 blocks neighbors
    test_cases.append(generate_test_case(n=4, b=1, m=2, seats=[1, 0, 1, 0]))  # Two type 1 block alternate seats
    
    # Edge Case 3: Multiple benches, no seats available
    test_cases.append(generate_test_case(n=6, b=2, m=1, seats=[1, 0, 2, 0, 2, 0]))  # All seats blocked
    
    # Edge Case 4: Large n, small b (e.g., n=100, b=1)
    seats = [0] * 100
    seats[0] = 2  # Block seat 1
    test_cases.append(generate_test_case(n=100, b=1, m=98, seats=seats))  # Many seats available
    test_cases.append(generate_test_case(n=100, b=1, m=99, seats=seats))  # Just not enough seats
    
    # Edge Case 5: Large b, small seats per bench (e.g., n=100, b=50)
    seats = [0] * 100
    for i in range(0, 100, 2):  # Place type 1 in every bench
        seats[i] = 1
    test_cases.append(generate_test_case(n=100, b=50, m=50, seats=seats))  # One seat per bench blocked
    
    # Edge Case 6: Invalid initial seating (type 1 next to type 2)
    test_cases.append(generate_test_case(n=4, b=1, m=1, seats=[1, 2, 0, 0]))  # Invalid: type 2 right of type 1
    test_cases.append(generate_test_case(n=4, b=1, m=1, seats=[2, 1, 0, 0]))  # Invalid: type 1 left of type 2
    
    # Edge Case 7: m=0 (always possible if valid)
    test_cases.append(generate_test_case(n=8, b=2, m=0, seats=[1, 0, 0, 0, 2, 0, 0, 0]))
    
    # Edge Case 8: Full bench with no restrictions
    test_cases.append(generate_test_case(n=8, b=2, m=8, seats=[0] * 8))  # All seats free
    test_cases.append(generate_test_case(n=8, b=2, m=9, seats=[0] * 8))  # Too many students
    
    # Random Test Cases
    for _ in range(10):
        n = random.randint(1, 100)
        b = random.choice([b for b in range(1, n + 1) if n % b == 0])
        m = random.randint(0, n)
        test_cases.append(generate_test_case(n, b, m))
    
    # Write test cases to file
    with open("stress2.txt", "w") as f:
        f.write("===== Test Cases =====\n")
        for i, (n, b, seats, m) in enumerate(test_cases, 1):
            result = can_seat_students(n, b, seats, m)
            f.write(f"\nTest Case {i}:\n")
            f.write(format_test_case(n, b, seats, m, result))
            f.write("--------------------\n")

if __name__ == "__main__":
    main()